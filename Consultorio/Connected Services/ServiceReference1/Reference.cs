//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Consultorio.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Consultar", ReplyAction="http://tempuri.org/IService1/ConsultarResponse")]
        Biblioteca.ClassesBasicas.Consulta[] Consultar(Biblioteca.ClassesBasicas.ConsultaFiltro pFiltro);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Consultar", ReplyAction="http://tempuri.org/IService1/ConsultarResponse")]
        System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.Consulta[]> ConsultarAsync(Biblioteca.ClassesBasicas.ConsultaFiltro pFiltro);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ConsultarPaciente", ReplyAction="http://tempuri.org/IService1/ConsultarPacienteResponse")]
        Biblioteca.ClassesBasicas.Paciente[] ConsultarPaciente(Biblioteca.ClassesBasicas.Paciente pFiltro);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ConsultarPaciente", ReplyAction="http://tempuri.org/IService1/ConsultarPacienteResponse")]
        System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.Paciente[]> ConsultarPacienteAsync(Biblioteca.ClassesBasicas.Paciente pFiltro);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ConsultarCEP", ReplyAction="http://tempuri.org/IService1/ConsultarCEPResponse")]
        Biblioteca.ClassesBasicas.CEP ConsultarCEP(string CEP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ConsultarCEP", ReplyAction="http://tempuri.org/IService1/ConsultarCEPResponse")]
        System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.CEP> ConsultarCEPAsync(string CEP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InserirPaciente", ReplyAction="http://tempuri.org/IService1/InserirPacienteResponse")]
        void InserirPaciente(Biblioteca.ClassesBasicas.Paciente pFiltro);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InserirPaciente", ReplyAction="http://tempuri.org/IService1/InserirPacienteResponse")]
        System.Threading.Tasks.Task InserirPacienteAsync(Biblioteca.ClassesBasicas.Paciente pFiltro);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AtualizarPaciente", ReplyAction="http://tempuri.org/IService1/AtualizarPacienteResponse")]
        void AtualizarPaciente(Biblioteca.ClassesBasicas.Paciente pFiltro);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AtualizarPaciente", ReplyAction="http://tempuri.org/IService1/AtualizarPacienteResponse")]
        System.Threading.Tasks.Task AtualizarPacienteAsync(Biblioteca.ClassesBasicas.Paciente pFiltro);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ConsultarHistorico", ReplyAction="http://tempuri.org/IService1/ConsultarHistoricoResponse")]
        Biblioteca.ClassesBasicas.HistoricoPaciente[] ConsultarHistorico(Biblioteca.ClassesBasicas.Paciente pFiltro);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ConsultarHistorico", ReplyAction="http://tempuri.org/IService1/ConsultarHistoricoResponse")]
        System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.HistoricoPaciente[]> ConsultarHistoricoAsync(Biblioteca.ClassesBasicas.Paciente pFiltro);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AtualizarHistorico", ReplyAction="http://tempuri.org/IService1/AtualizarHistoricoResponse")]
        void AtualizarHistorico(Biblioteca.ClassesBasicas.HistoricoPaciente pHistorico);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AtualizarHistorico", ReplyAction="http://tempuri.org/IService1/AtualizarHistoricoResponse")]
        System.Threading.Tasks.Task AtualizarHistoricoAsync(Biblioteca.ClassesBasicas.HistoricoPaciente pHistorico);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Consultorio.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Consultorio.ServiceReference1.IService1>, Consultorio.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Biblioteca.ClassesBasicas.Consulta[] Consultar(Biblioteca.ClassesBasicas.ConsultaFiltro pFiltro) {
            return base.Channel.Consultar(pFiltro);
        }
        
        public System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.Consulta[]> ConsultarAsync(Biblioteca.ClassesBasicas.ConsultaFiltro pFiltro) {
            return base.Channel.ConsultarAsync(pFiltro);
        }
        
        public Biblioteca.ClassesBasicas.Paciente[] ConsultarPaciente(Biblioteca.ClassesBasicas.Paciente pFiltro) {
            return base.Channel.ConsultarPaciente(pFiltro);
        }
        
        public System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.Paciente[]> ConsultarPacienteAsync(Biblioteca.ClassesBasicas.Paciente pFiltro) {
            return base.Channel.ConsultarPacienteAsync(pFiltro);
        }
        
        public Biblioteca.ClassesBasicas.CEP ConsultarCEP(string CEP) {
            return base.Channel.ConsultarCEP(CEP);
        }
        
        public System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.CEP> ConsultarCEPAsync(string CEP) {
            return base.Channel.ConsultarCEPAsync(CEP);
        }
        
        public void InserirPaciente(Biblioteca.ClassesBasicas.Paciente pFiltro) {
            base.Channel.InserirPaciente(pFiltro);
        }
        
        public System.Threading.Tasks.Task InserirPacienteAsync(Biblioteca.ClassesBasicas.Paciente pFiltro) {
            return base.Channel.InserirPacienteAsync(pFiltro);
        }
        
        public void AtualizarPaciente(Biblioteca.ClassesBasicas.Paciente pFiltro) {
            base.Channel.AtualizarPaciente(pFiltro);
        }
        
        public System.Threading.Tasks.Task AtualizarPacienteAsync(Biblioteca.ClassesBasicas.Paciente pFiltro) {
            return base.Channel.AtualizarPacienteAsync(pFiltro);
        }
        
        public Biblioteca.ClassesBasicas.HistoricoPaciente[] ConsultarHistorico(Biblioteca.ClassesBasicas.Paciente pFiltro) {
            return base.Channel.ConsultarHistorico(pFiltro);
        }
        
        public System.Threading.Tasks.Task<Biblioteca.ClassesBasicas.HistoricoPaciente[]> ConsultarHistoricoAsync(Biblioteca.ClassesBasicas.Paciente pFiltro) {
            return base.Channel.ConsultarHistoricoAsync(pFiltro);
        }
        
        public void AtualizarHistorico(Biblioteca.ClassesBasicas.HistoricoPaciente pHistorico) {
            base.Channel.AtualizarHistorico(pHistorico);
        }
        
        public System.Threading.Tasks.Task AtualizarHistoricoAsync(Biblioteca.ClassesBasicas.HistoricoPaciente pHistorico) {
            return base.Channel.AtualizarHistoricoAsync(pHistorico);
        }
    }
}
